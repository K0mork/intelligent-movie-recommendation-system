#!/bin/bash

# FilmFlow Pre-commit Hook - API Key Detection
# セキュリティ: APIキー漏洩防止

set -e

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 FilmFlow Security Check - API Key Detection${NC}"

# APIキーパターン定義
FIREBASE_PATTERN="AIzaSy[0-9A-Za-z_-]{33}"
TMDB_PATTERN="[0-9a-fA-F]{32}"
OPENAI_PATTERN="sk-[0-9A-Za-z]{48}"
AWS_ACCESS_KEY_PATTERN="AKIA[0-9A-Z]{16}"
AWS_SECRET_PATTERN="[0-9A-Za-z/+=]{40}"

# 許可されたプレースホルダー（allowlist）
ALLOWED_PLACEHOLDERS=(
    "YOUR_API_KEY"
    "YOUR_FIREBASE_API_KEY"
    "YOUR_TMDB_API_KEY"
    "<FIREBASE_API_KEY_PLACEHOLDER>"
    "<TMDB_API_KEY_PLACEHOLDER>"
    "<API_KEY_PLACEHOLDER>"
    "your_api_key_here"
    "YOUR_GOOGLE_APP_ID"
    "YOUR_CLIENT_ID"
    "YOUR_PROJECT_NUMBER"
    "YOUR_MOBILE_SDK_APP_ID"
    "YOUR_GCM_SENDER_ID"
    "your-firebase-project-id"
    "com.example.movie_recommend_app"
    "com.example.movieRecommendApp"
)

# 除外するファイルパターン
EXCLUDE_PATTERNS=(
    "\.git/"
    "build/"
    "\.dart_tool/"
    "\.pub-cache/"
    "node_modules/"
    "coverage/"
    "test-results/"
    "\.tmp$"
    "\.log$"
    "\.gitignore$"
    "\.md$"
)

# 検出されたAPIキー数
DETECTION_COUNT=0

# プレースホルダーチェック関数
is_placeholder() {
    local key="$1"
    for placeholder in "${ALLOWED_PLACEHOLDERS[@]}"; do
        if [[ "$key" == "$placeholder" ]]; then
            return 0
        fi
    done
    return 1
}

# ファイル除外チェック関数
should_exclude_file() {
    local file="$1"
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        if [[ "$file" =~ $pattern ]]; then
            return 0
        fi
    done
    return 1
}

# APIキー検出関数
detect_api_keys() {
    local pattern="$1"
    local pattern_name="$2"
    local color="$3"

    echo -e "${color}Checking for ${pattern_name} keys...${NC}"

    # ステージされたファイルを取得
    while IFS= read -r -d '' file; do
        # ファイル除外チェック
        if should_exclude_file "$file"; then
            continue
        fi

        # ファイルが存在し、読み取り可能かチェック
        if [[ ! -f "$file" || ! -r "$file" ]]; then
            continue
        fi

        # パターンマッチング
        while IFS= read -r line_num; do
            line_content=$(sed -n "${line_num}p" "$file")
            matched_key=$(echo "$line_content" | grep -oE "$pattern" | head -1)

            if [[ -n "$matched_key" ]]; then
                # プレースホルダーチェック
                if is_placeholder "$matched_key"; then
                    echo -e "${GREEN}  ✓ Placeholder detected in $file:$line_num${NC}"
                    continue
                fi

                # APIキー検出
                echo -e "${RED}  ❌ ${pattern_name} detected in $file:$line_num${NC}"
                echo -e "${RED}     Key: ${matched_key}${NC}"
                echo -e "${RED}     Line: ${line_content}${NC}"
                ((DETECTION_COUNT++))
            fi
        done < <(grep -n "$pattern" "$file" 2>/dev/null | cut -d: -f1)

    done < <(git diff --cached --name-only -z)
}

# メイン検出処理
echo -e "${BLUE}🔍 Scanning staged files for API keys...${NC}"

# Firebase API Key検出
detect_api_keys "$FIREBASE_PATTERN" "Firebase API" "$YELLOW"

# TMDb API Key検出
detect_api_keys "$TMDB_PATTERN" "TMDb API" "$YELLOW"

# OpenAI API Key検出
detect_api_keys "$OPENAI_PATTERN" "OpenAI API" "$YELLOW"

# AWS Access Key検出
detect_api_keys "$AWS_ACCESS_KEY_PATTERN" "AWS Access" "$YELLOW"

# AWS Secret Key検出
detect_api_keys "$AWS_SECRET_PATTERN" "AWS Secret" "$YELLOW"

# 結果判定
if [[ $DETECTION_COUNT -gt 0 ]]; then
    echo -e "${RED}🚨 COMMIT BLOCKED: ${DETECTION_COUNT} API key(s) detected!${NC}"
    echo -e "${RED}Security Alert: Potential API keys found in staged files${NC}"
    echo -e "${YELLOW}Actions required:${NC}"
    echo -e "  1. Remove or replace API keys with placeholders"
    echo -e "  2. Use environment variables for actual keys"
    echo -e "  3. Update .env file (excluded from git)"
    echo -e "  4. Run 'git add' again after fixing"
    echo -e "${BLUE}Allowed placeholders:${NC}"
    printf '  - %s\n' "${ALLOWED_PLACEHOLDERS[@]}"
    exit 1
else
    echo -e "${GREEN}✅ No API keys detected. Commit allowed.${NC}"
    echo -e "${GREEN}Security check passed successfully!${NC}"
    exit 0
fi
