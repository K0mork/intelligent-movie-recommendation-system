#!/usr/bin/env bash
# FilmFlow API Key Detection Pre-commit Hook
# Prevents accidental commits of API keys and other secrets
# --------------------------------------------------------
# 2025-06-24  Refactored for reliability & maintainability

set -euo pipefail

printf "🔍 FilmFlow Security Check: APIキー検出スキャンを実行中...\n"

# ────────────────────────
# Colour definitions
# ────────────────────────
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
NC='\033[0m'  # No colour

# ────────────────────────
# Secret-looking patterns (ECMAScript-style regex)
# ────────────────────────
PATTERNS=(
  # Firebase Web API key (starts with AIzaSy + 35 chars)
  "AIzaSy[0-9A-Za-z_-]{33}"
  # 32-char hex strings (e.g. TMDB keys)
  "[0-9a-fA-F]{32}"
  # Generic *_API_KEY or *_KEY assignments
  "[A-Za-z0-9_]*API[_-]?KEY[[:space:]]*=[[:space:]]*['\"][0-9A-Za-z_-]{20,}['\"]"
  # *_SECRET= or *_TOKEN=
  "[A-Za-z0-9_]*SECRET[[:space:]]*=[[:space:]]*['\"][0-9A-Za-z_-]{20,}['\"]"
  "[A-Za-z0-9_]*TOKEN[[:space:]]*=[[:space:]]*['\"][0-9A-Za-z_-]{20,}['\"]"
)

# ────────────────────────
# Allowed placeholders (exact string match)
# ────────────────────────
ALLOWED_PATTERNS=(
  "YOUR_API_KEY"
  "YOUR_FIREBASE_API_KEY"
  "YOUR_TMDB_API_KEY"
  "<FIREBASE_API_KEY_PLACEHOLDER>"
  "<TMDB_API_KEY_PLACEHOLDER>"
  "<API_KEY_PLACEHOLDER>"
  "PLACEHOLDER"
  "EXAMPLE"
  "TEST_KEY"
)

# ────────────────────────
# Paths to exclude from scanning (shell globs)
# ────────────────────────
EXCLUDE_GLOBS=(
  ".git/*"
  "node_modules/*"
  "build/*"
  ".dart_tool/*"
  "coverage/*"
  "*.log"
)

# ────────────────────────
# Helper functions
# ────────────────────────
contains_allowed() {
  local line="$1"
  for allow in "${ALLOWED_PATTERNS[@]}"; do
    if grep -qF -- "${allow}" <<< "${line}"; then
      return 0  # allowed
    fi
  done
  return 1  # not allowed
}

should_skip_file() {
  local file="$1"
  for glob in "${EXCLUDE_GLOBS[@]}"; do
    case "${file}" in
      ${glob}) return 0 ;; # skip
    esac
  done
  return 1  # do not skip
}

# ────────────────────────
# Collect staged files
# ────────────────────────
STAGED_FILES=()
while IFS= read -r file; do
  STAGED_FILES+=("$file")
done < <(git diff --cached --name-only --diff-filter=ACMR)

if [[ ${#STAGED_FILES[@]} -eq 0 ]]; then
  printf "${GREEN}✅ ステージされたファイルがありません${NC}\n"
  exit 0
fi

printf "${YELLOW}📝 ステージされたファイル: %d件${NC}\n" "${#STAGED_FILES[@]}"

FOUND=0
REPORT_FILE="$(mktemp)"

for file in "${STAGED_FILES[@]}"; do
  # Exclude patterns & missing files
  should_skip_file "${file}" && continue
  [[ -f "${file}" ]] || continue

  printf "🔍 チェック中: %s\n" "${file}"

  # Search each pattern
  for pattern in "${PATTERNS[@]}"; do
    matches=$(grep -I -n -E -- "${pattern}" "${file}" || true)
    [[ -z "${matches}" ]] && continue
    while IFS= read -r line; do
      if ! contains_allowed "${line}"; then
        printf "${RED}🚨 APIキー検出: %s${NC}\n" "${file}" >> "${REPORT_FILE}"
        printf "${RED}   パターン: %s${NC}\n" "${pattern}" >> "${REPORT_FILE}"
        printf "${RED}   マッチ: %s${NC}\n" "${line}" >> "${REPORT_FILE}"
        FOUND=1
      fi
    done <<< "${matches}"
  done

done

# ────────────────────────
# Result
# ────────────────────────
if [[ ${FOUND} -eq 1 ]]; then
  printf "\n${RED}${BOLD}🚨🚨🚨 セキュリティアラート 🚨🚨🚨${NC}\n"
  printf "${RED}${BOLD}APIキーまたは機密情報が検出されました！${NC}\n\n"
  cat "${REPORT_FILE}"
  printf "\n${YELLOW}${BOLD}📋 対応方法:${NC}\n"
  printf "1. 検出されたAPIキーを削除／置換してください\n"
  printf "2. 環境変数(.env)を使用してください\n"
  printf "3. プレースホルダ(YOUR_API_KEY など)を使用してください\n"
  printf "4. 必要に応じて .gitignore に追加してください\n\n"
  printf "${RED}${BOLD}コミットを中断しました。${NC}\n"
  rm -f "${REPORT_FILE}"
  exit 1
fi

printf "\n${GREEN}${BOLD}✅ セキュリティチェック完了${NC}\n"
printf "${GREEN}🔒 APIキーは検出されませんでした${NC}\n"
printf "${GREEN}🚀 コミットを続行します${NC}\n"

rm -f "${REPORT_FILE}"
exit 0
