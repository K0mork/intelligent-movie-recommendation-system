#!/bin/bash

# FilmFlow API Key Detection Pre-commit Hook
# このフックはコミット前にAPIキーの漏洩を防ぎます

set -e

echo "🔍 FilmFlow Security Check: APIキー検出スキャンを実行中..."

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# 検出パターン
PATTERNS=(
    # Firebase API Keys
    "AIzaSy[0-9A-Za-z_-]{33}"
    # TMDb API Keys (32文字のhex)
    "[0-9a-f]{32}"
    # 一般的なAPI Key パターン
    "[Aa][Pp][Ii]_?[Kk][Ee][Yy].*['\"][0-9A-Za-z_-]{20,}['\"]"
    "[Kk][Ee][Yy].*['\"][0-9A-Za-z_-]{20,}['\"]"
    # Secret パターン
    "[Ss][Ee][Cc][Rr][Ee][Tt].*['\"][0-9A-Za-z_-]{20,}['\"]"
    # Token パターン
    "[Tt][Oo][Kk][Ee][Nn].*['\"][0-9A-Za-z_-]{20,}['\"]"
    # 具体的なAPIキー文字列
    "firebase.*api.*key"
    "tmdb.*api.*key"
    "google.*cloud.*key"
    "vertex.*ai.*key"
)

# 除外ファイル/ディレクトリ
EXCLUDE_PATTERNS=(
    ".git/"
    "node_modules/"
    "build/"
    ".flutter-plugins"
    ".dart_tool/"
    "*.log"
    "coverage/"
    "*.md"  # ドキュメントは除外（プレースホルダー含むため）
)

# 検出フラグ
FOUND_SECRETS=0
TEMP_FILE=$(mktemp)

# ステージされたファイルの取得
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✅ ステージされたファイルがありません${NC}"
    exit 0
fi

echo -e "${YELLOW}📝 ステージされたファイル: $(echo "$STAGED_FILES" | wc -l)件${NC}"

# 各ファイルをチェック
for file in $STAGED_FILES; do
    # ファイルが存在するかチェック
    if [ ! -f "$file" ]; then
        continue
    fi
    
    # 除外パターンのチェック
    SKIP_FILE=0
    for exclude in "${EXCLUDE_PATTERNS[@]}"; do
        if [[ "$file" == *"$exclude"* ]]; then
            SKIP_FILE=1
            break
        fi
    done
    
    if [ $SKIP_FILE -eq 1 ]; then
        continue
    fi
    
    echo -e "🔍 チェック中: ${file}"
    
    # 各パターンでファイルをチェック
    for pattern in "${PATTERNS[@]}"; do
        # grepで検出（行番号付き）
        if grep -Hn -E "$pattern" "$file" 2>/dev/null; then
            echo -e "${RED}🚨 APIキー検出: ${file}${NC}" >> "$TEMP_FILE"
            echo -e "${RED}   パターン: ${pattern}${NC}" >> "$TEMP_FILE"
            FOUND_SECRETS=1
        fi
    done
    
    # 特定の危険な文字列をチェック
    DANGEROUS_STRINGS=(
        "AIzaSy"
        "firebase.*api.*key.*="
        "tmdb.*api.*key.*="
        "api_key.*="
        "apiKey.*="
        "secret.*="
        "token.*="
    )
    
    for dangerous in "${DANGEROUS_STRINGS[@]}"; do
        if grep -Hn -i -E "$dangerous" "$file" 2>/dev/null | grep -v -E "(YOUR_|PLACEHOLDER|EXAMPLE|TEST)" 2>/dev/null; then
            echo -e "${RED}🚨 危険な文字列検出: ${file}${NC}" >> "$TEMP_FILE"
            echo -e "${RED}   検出: ${dangerous}${NC}" >> "$TEMP_FILE"
            FOUND_SECRETS=1
        fi
    done
done

# 結果の表示
if [ $FOUND_SECRETS -eq 1 ]; then
    echo -e "\n${RED}${BOLD}🚨🚨🚨 セキュリティアラート 🚨🚨🚨${NC}"
    echo -e "${RED}${BOLD}APIキーまたは機密情報が検出されました！${NC}\n"
    
    cat "$TEMP_FILE"
    
    echo -e "\n${YELLOW}${BOLD}📋 対応方法:${NC}"
    echo -e "1. 検出されたAPIキーを削除/置換してください"
    echo -e "2. 環境変数(.env)を使用してください"
    echo -e "3. プレースホルダー(YOUR_API_KEY)を使用してください"
    echo -e "4. 必要に応じて.gitignoreに追加してください"
    
    echo -e "\n${YELLOW}例:${NC}"
    echo -e "  ${RED}❌ TMDB_API_KEY=\"c65d227a2aaee31fb24c0938b8bb4318\"${NC}"
    echo -e "  ${GREEN}✅ TMDB_API_KEY=\"YOUR_TMDB_API_KEY\"${NC}"
    
    echo -e "\n${RED}${BOLD}コミットを中断しました。${NC}"
    rm -f "$TEMP_FILE"
    exit 1
else
    echo -e "\n${GREEN}${BOLD}✅ セキュリティチェック完了${NC}"
    echo -e "${GREEN}🔒 APIキーは検出されませんでした${NC}"
    echo -e "${GREEN}🚀 コミットを続行します${NC}"
fi

rm -f "$TEMP_FILE"
exit 0