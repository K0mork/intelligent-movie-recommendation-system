// Mocks generated by Mockito 5.4.6 from annotations
// in filmflow/test/features/reviews/data/repositories/review_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:filmflow/features/reviews/data/datasources/review_remote_datasource.dart'
    as _i3;
import 'package:filmflow/features/reviews/data/models/review_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReviewModel_0 extends _i1.SmartFake implements _i2.ReviewModel {
  _FakeReviewModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ReviewRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockReviewRemoteDataSource extends _i1.Mock
    implements _i3.ReviewRemoteDataSource {
  MockReviewRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.ReviewModel>> getReviews({
    String? userId,
    String? movieId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getReviews, [], {
              #userId: userId,
              #movieId: movieId,
            }),
            returnValue: _i4.Future<List<_i2.ReviewModel>>.value(
              <_i2.ReviewModel>[],
            ),
          )
          as _i4.Future<List<_i2.ReviewModel>>);

  @override
  _i4.Future<_i2.ReviewModel> getReview(String? reviewId) =>
      (super.noSuchMethod(
            Invocation.method(#getReview, [reviewId]),
            returnValue: _i4.Future<_i2.ReviewModel>.value(
              _FakeReviewModel_0(
                this,
                Invocation.method(#getReview, [reviewId]),
              ),
            ),
          )
          as _i4.Future<_i2.ReviewModel>);

  @override
  _i4.Future<String> createReview(_i2.ReviewModel? review) =>
      (super.noSuchMethod(
            Invocation.method(#createReview, [review]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#createReview, [review]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<void> updateReview(_i2.ReviewModel? review) =>
      (super.noSuchMethod(
            Invocation.method(#updateReview, [review]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteReview(String? reviewId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteReview, [reviewId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.ReviewModel>> getUserReviews(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserReviews, [userId]),
            returnValue: _i4.Future<List<_i2.ReviewModel>>.value(
              <_i2.ReviewModel>[],
            ),
          )
          as _i4.Future<List<_i2.ReviewModel>>);
}
