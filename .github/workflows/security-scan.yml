# =========================================
#  🔒 Security Scan - API Key Detection Only
# =========================================
# 目的：
#   1.  独自シェルスクリプトでAPI キー／シークレット探索のみ実行
#   2.  Flutter AnalyzeやFormatはローカル環境のpre-commitで実行
#   3.  CI環境でのFlutterバージョン問題を回避
# =========================================

name: 🔒 Security Scan - API Key Detection Only

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  security-scan:
    name: 🔍 API Key Detection Scan
    runs-on: ubuntu-latest

    steps:
    # ────────────────────────────────────
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        # セキュリティスキャン最適化: 直近コミットのみに制限
        fetch-depth: 1

    # ────────────────────────────────────
    # カスタム grep スキャン（API Key検出専用）
    - name: 🔍 Scan for API Keys and Secrets
      continue-on-error: true
      id: customscan
      run: |
        set -euo pipefail

        echo "🛡️  FilmFlow Security Scan: APIキー／シークレット検出を開始…"

        # ───── 色設定（ANSI）─────
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        BOLD='\033[1m'

        # ───── 検索パターン定義（POSIX互換・精度向上版） ─────
        REGEX_LIST=(
          "AIzaSy[0-9A-Za-z_-]{33}"                # Firebase API Key
          "[0-9a-f]{32}[^0-9a-f]"                  # 32桁hex (境界文字で精緻化)
          "[Aa][Pp][Ii]_?[Kk][Ee][Yy].*[0-9A-Za-z_-]{20,}"  # 'API_KEY=' 等
          "[Ss][Ee][Cc][Rr][Ee][Tt].*[0-9A-Za-z_-]{20,}"    # 'SECRET=' 等
          "[Tt][Oo][Kk][Ee][Nn].*[0-9A-Za-z_-]{20,}"        # 'TOKEN=' 等
        )
        # ───── 除外キーワード（Mockito・テストファイル対応強化） ─────
        EXCLUDE_CONTENT='(YOUR_|PLACEHOLDER|EXAMPLE|TEST|TEMPLATE|MOCK|revokeToken|testtmdb|your_.*_api_key|your-.*-api-key|your_new_.*_api_key|your_gemini_api_key_here|sha256:|AWS_ACCESS_KEY_PATTERN|revision:|create_revision:|base_revision:|greaterThanOrEqualTo|equalTo|lessThan|length.*[0-9]{2,}|expect.*[0-9]{2,}|_Fake.*_[0-9]+|returnValue.*_i[0-9]+|\.mocks\.dart|_FakeIdTokenResult_|SmartFake)'

        echo -e "${BLUE}📝 スキャン対象ファイル収集中…${NC}"
        mapfile -d '' FILES < <(find . -type f \
          ! -path "*/.git/*" \
          ! -path "*/node_modules/*" \
          ! -path "*/build/*" \
          ! -path "*/.dart_tool/*" \
          ! -path "*/coverage/*" \
          ! -path "*/test/*" \
          ! -path "*/.githooks/*" \
          ! -path "./.env.example" \
          ! -path "./lib/firebase_options_template.dart" \
          ! -path "./CLAUDE.md" \
          ! -name "*.log" \
          ! -name "*.mocks.dart" \
          ! -name ".metadata" \
          ! -name "pubspec.lock" \
          -print0)

        FOUND=0

        echo -e "${BLUE}🔍 ワーキングツリーをスキャン中…${NC}"
        for file in "${FILES[@]}"; do
          for regex in "${REGEX_LIST[@]}"; do
            # エラーハンドリング強化：各正規表現を個別処理
            if grep -HnE "$regex" "$file" 2>/dev/null | grep -vE "$EXCLUDE_CONTENT" >/dev/null 2>&1; then
              echo -e "${RED}🚨 機密情報検出:${NC} ${file} (pattern: ${regex})"
              grep -HnE "$regex" "$file" 2>/dev/null | grep -vE "$EXCLUDE_CONTENT" || true
              FOUND=1
            fi
          done
        done

        echo -e "${YELLOW}📚 Git履歴（直近1コミット）をスキャン中…${NC}"
        if git rev-list --max-count=1 --all >/dev/null 2>&1; then
          git rev-list --max-count=1 --all | while read commit; do
            for regex in "${REGEX_LIST[@]}"; do
              # git grepのエラーハンドリング強化
              if git grep -E "$regex" "$commit" -- . 2>/dev/null | grep -vE "$EXCLUDE_CONTENT" >/dev/null 2>&1; then
                echo -e "${RED}⚠️  履歴内で機密情報検出:${NC} commit ${commit}"
                git grep -E "$regex" "$commit" -- . 2>/dev/null | grep -vE "$EXCLUDE_CONTENT" || true
                FOUND=1
              fi
            done
          done
        else
          echo -e "${YELLOW}ℹ️  Git履歴アクセスできないため、ワーキングツリーのみスキャン${NC}"
        fi

        echo -e "${GREEN}🔍 スキャン完了${NC}"

        if [[ $FOUND -eq 1 ]]; then
          echo -e "${RED}${BOLD}🚨 セキュリティアラート：機密情報が検出されました${NC}"
          echo "scan_result=failure" >> $GITHUB_OUTPUT
          exit 2  # exit code 2 = custom scan failure
        else
          echo -e "${GREEN}${BOLD}✅ カスタムスキャン：問題なし${NC}"
          echo "scan_result=success" >> $GITHUB_OUTPUT
        fi

    # ────────────────────────────────────
    # 結果判定：カスタムスキャンの結果のみ評価
    - name: 🗂️  Evaluate Security Scan Results
      if: always()
      run: |
        CUSTOM_SCAN_RESULT=${{ steps.customscan.outputs.scan_result }}
        echo "custom scan result: ${CUSTOM_SCAN_RESULT}"

        # custom scan が failure ならエラー終了
        if [[ "${CUSTOM_SCAN_RESULT}" == "failure" ]]; then
          echo "::error title=Security Violation::API keys or secrets detected in the codebase"
          echo "::error::Remove hard-coded secrets, rewrite history if necessary, and store them in GitHub Secrets or environment variables."
          exit 1
        fi

    # ────────────────────────────────────
    - name: ✅ Security Check Passed
      if: success()
      run: |
        echo "::notice title=Security Check::No secrets detected - good job! 🎉"
